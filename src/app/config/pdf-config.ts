// ملف إعدادات PDF - src/app/config/pdf-config.ts

export const PDF_CONFIG = {
  // الإعدادات الافتراضية
  defaultOptions: {
    title: 'تقرير المهام - ذكرني',
    includeStats: true,
    includeCompletedTasks: true,
    orientation: 'portrait' as const,
    format: 'a4' as const,
    language: 'ar' as const
  },

  // الألوان المستخدمة في PDF
  colors: {
    primary: [59, 130, 246],      // أزرق
    success: [34, 197, 94],       // أخضر
    warning: [249, 115, 22],      // برتقالي
    danger: [239, 68, 68],        // أحمر
    gray: [107, 114, 128],        // رمادي
    lightGray: [229, 231, 235],   // رمادي فاتح
    darkGray: [51, 65, 85],       // رمادي داكن
    white: [255, 255, 255],       // أبيض
    black: [0, 0, 0]              // أسود
  },

  // إعدادات الخطوط
  fonts: {
    arabic: {
      family: 'times',
      fallback: 'helvetica'
    },
    english: {
      family: 'helvetica',
      fallback: 'arial'
    },
    sizes: {
      title: 24,
      subtitle: 18,
      heading: 16,
      body: 12,
      small: 10,
      tiny: 9
    }
  },

  // إعدادات التخطيط
  layout: {
    margin: 20,
    pageWidth: {
      a4: 210,
      letter: 216
    },
    pageHeight: {
      a4: 297,
      letter: 279
    },
    statBoxHeight: 25,
    taskItemHeight: 30,
    lineSpacing: 6,
    sectionSpacing: 15
  },

  // إعدادات الإحصائيات
  stats: {
    boxColors: [
      { bg: [59, 130, 246], text: [255, 255, 255], label: 'المجموع' },    // أزرق
      { bg: [34, 197, 94], text: [255, 255, 255], label: 'مكتملة' },     // أخضر
      { bg: [249, 115, 22], text: [255, 255, 255], label: 'معلقة' },     // برتقالي
      { bg: [239, 68, 68], text: [255, 255, 255], label: 'متأخرة' }      // أحمر
    ],
    boxSpacing: 10,
    valueTextSize: 20,
    labelTextSize: 10
  },

  // إعدادات حالة المهام
  taskStatus: {
    completed: {
      color: [34, 197, 94],
      icon: '✓',
      text: 'مكتملة'
    },
    pending: {
      color: [249, 115, 22],
      icon: '○',
      text: 'معلقة'
    },
    overdue: {
      color: [239, 68, 68],
      icon: '⚠',
      text: 'متأخرة'
    }
  },

  // إعدادات الأولوية
  priority: {
    high: {
      color: [239, 68, 68],
      icon: '🔴',
      text: 'عالية'
    },
    medium: {
      color: [249, 115, 22],
      icon: '🟡',
      text: 'متوسطة'
    },
    low: {
      color: [34, 197, 94],
      icon: '🟢',
      text: 'منخفضة'
    }
  },

  // النصوص المترجمة
  texts: {
    ar: {
      reportTitle: 'تقرير المهام - ذكرني',
      detailedReport: 'تقرير مفصل - إدارة المهام',
      quickStats: 'الإحصائيات السريعة',
      reportDate: 'تاريخ التقرير',
      tasksList: 'قائمة المهام',
      taskDetails: 'تفاصيل المهام',
      priorityAnalysis: 'توزيع المهام حسب الأولوية',
      statusAnalysis: 'تحليل حالة المهام',
      footer: 'تم إنشاء هذا التقرير بواسطة تطبيق ذكرني',
      pageText: 'صفحة',
      taskCount: 'مهمة',
      totalTasks: 'إجمالي المهام',
      completedTasks: 'المهام المكتملة',
      pendingTasks: 'المهام المعلقة',
      overdueTasks: 'المهام المتأخرة',
      completionRate: 'معدل الإنجاز',
      noDate: 'بدون تاريخ',
      notSpecified: 'غير محدد',
      status: 'الحالة',
      priority: 'الأولوية',
      dueDate: 'تاريخ الاستحقاق',
      createdDate: 'تاريخ الإنشاء',
      highPriority: 'أولوية عالية',
      mediumPriority: 'أولوية متوسطة',
      lowPriority: 'أولوية منخفضة'
    },
    en: {
      reportTitle: 'Tasks Report - Zakkerni',
      detailedReport: 'Detailed Report - Task Management',
      quickStats: 'Quick Statistics',
      reportDate: 'Report Date',
      tasksList: 'Tasks List',
      taskDetails: 'Task Details',
      priorityAnalysis: 'Task Distribution by Priority',
      statusAnalysis: 'Task Status Analysis',
      footer: 'Generated by Zakkerni App',
      pageText: 'Page',
      taskCount: 'tasks',
      totalTasks: 'Total Tasks',
      completedTasks: 'Completed Tasks',
      pendingTasks: 'Pending Tasks',
      overdueTasks: 'Overdue Tasks',
      completionRate: 'Completion Rate',
      noDate: 'No Date',
      notSpecified: 'Not Specified',
      status: 'Status',
      priority: 'Priority',
      dueDate: 'Due Date',
      createdDate: 'Created Date',
      highPriority: 'High Priority',
      mediumPriority: 'Medium Priority',
      lowPriority: 'Low Priority'
    }
  },

  // إعدادات التصدير
  export: {
    fileNamePrefix: {
      ar: 'تقرير_المهام',
      en: 'tasks_report'
    },
    detailedFileNamePrefix: {
      ar: 'تقرير_مفصل',
      en: 'detailed_report'
    },
    dateFormat: {
      ar: 'ar-SA',
      en: 'en-US'
    }
  },

  // إعدادات الضغط والجودة
  quality: {
    imageScale: 2,           // دقة الصور
    compressionLevel: 0.8,   // مستوى الضغط
    maxDescriptionLength: 80, // أقصى طول للوصف
    maxTasksPerPage: 15      // أقصى عدد مهام في الصفحة
  },

  // إعدادات متقدمة
  advanced: {
    rtlSupport: true,        // دعم الكتابة من اليمين لليسار
    enablePageNumbers: true, // تفعيل أرقام الصفحات
    enableFooter: true,      // تفعيل التذييل
    enableHeader: false,     // تفعيل الترويسة
    borderRadius: 3,         // نصف قطر الحواف
    lineWidth: 0.5,          // سمك الخطوط
    enableShadows: false,    // تفعيل الظلال (غير مدعوم في jsPDF الأساسي)
    enableGradients: false   // تفعيل التدرجات (غير مدعوم في jsPDF الأساسي)
  }
};

// دالات مساعدة للوصول للإعدادات
export class PdfConfigHelper {
  
  /**
   * الحصول على نص مترجم
   */
  static getText(key: string, language: 'ar' | 'en' = 'ar'): string {
    return PDF_CONFIG.texts[language][key as keyof typeof PDF_CONFIG.texts.ar] || key;
  }

  /**
   * الحصول على لون حسب النوع
   */
  static getColor(type: keyof typeof PDF_CONFIG.colors): [number, number, number] {
    return PDF_CONFIG.colors[type] as [number, number, number];
  }

  /**
   * الحصول على إعدادات حالة المهمة
   */
  static getTaskStatusConfig(completed: boolean, overdue: boolean) {
    if (completed) {
      return PDF_CONFIG.taskStatus.completed;
    } else if (overdue) {
      return PDF_CONFIG.taskStatus.overdue;
    } else {
      return PDF_CONFIG.taskStatus.pending;
    }
  }

  /**
   * الحصول على إعدادات الأولوية
   */
  static getPriorityConfig(priority: 'high' | 'medium' | 'low') {
    return PDF_CONFIG.priority[priority] || PDF_CONFIG.priority.low;
  }

  /**
   * الحصول على اسم الملف
   */
  static getFileName(isDetailed: boolean = false, language: 'ar' | 'en' = 'ar'): string {
    const prefix = isDetailed 
      ? PDF_CONFIG.export.detailedFileNamePrefix[language]
      : PDF_CONFIG.export.fileNamePrefix[language];
    
    const date = new Date().toISOString().split('T')[0];
    return `${prefix}_${date}.pdf`;
  }

  /**
   * تنسيق التاريخ حسب اللغة
   */
  static formatDate(date: Date | string, language: 'ar' | 'en' = 'ar'): string {
    const dateObj = date instanceof Date ? date : new Date(date);
    const locale = PDF_CONFIG.export.dateFormat[language];
    
    if (language === 'ar') {
      return dateObj.toLocaleDateString(locale, {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } else {
      return dateObj.toLocaleDateString(locale, {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    }
  }

  /**
   * حساب عرض المحتوى
   */
  static getContentWidth(format: 'a4' | 'letter' = 'a4'): number {
    const pageWidth = PDF_CONFIG.layout.pageWidth[format];
    return pageWidth - (PDF_CONFIG.layout.margin * 2);
  }

  /**
   * حساب ارتفاع المحتوى
   */
  static getContentHeight(format: 'a4' | 'letter' = 'a4'): number {
    const pageHeight = PDF_CONFIG.layout.pageHeight[format];
    return pageHeight - (PDF_CONFIG.layout.margin * 2);
  }

  /**
   * التحقق من الحاجة لصفحة جديدة
   */
  static needsNewPage(currentY: number, requiredSpace: number, format: 'a4' | 'letter' = 'a4'): boolean {
    const maxY = PDF_CONFIG.layout.pageHeight[format] - PDF_CONFIG.layout.margin - 30; // 30 للتذييل
    return (currentY + requiredSpace) > maxY;
  }
}

// تصدير الأنواع للاستخدام في أماكن أخرى
export type PdfLanguage = 'ar' | 'en';
export type PdfFormat = 'a4' | 'letter';
export type PdfOrientation = 'portrait' | 'landscape';
export type TaskPriority = 'high' | 'medium' | 'low';
export type ColorType = keyof typeof PDF_CONFIG.colors;